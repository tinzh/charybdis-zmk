#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/ext_power.h>

#define MACRO_PLACEHOLDER 0

// variables
#define HOLD_MS       1000  // time after which hold action is activated
#define TAP_DANCE_MS  1000  // max time between tap-dance taps

// layers
#define BS_L  0
#define SYM_L 1
#define NUM_L 2
#define NAV_L 3
#define GAM_L 4
#define MS_L  5
#define SNM_L 6
#define SCM_L 7
#define QGM_L 8
#define QNM_L 8

// redefines
#define BRIUP C_BRI_UP
#define BRIDN C_BRI_DN
#define VOLUP C_VOL_UP
#define VOLDN C_VOL_DN
#define VMUTE C_MUTE

/ {
    /* input config for mouse move mode */
    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <BS_L MS_L>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <7>;
        scale-divisor = <10>;
        // bindings = <&ib_toggle_layer 7>;
    };

    /* input config for snipe mode */
    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <NAV_L SNM_L>;
        evt-type = <INPUT_EV_REL>;

        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <3>;
        scale-divisor = <10>;
    };

    /* input config for mouse scroll mode */
    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <NUM_L SCM_L>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        scale-multiplier = <2>;
        scale-divisor = <5>;
        bindings = <&ib_wheel_scaler 1 14>;
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */
    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    /* adjust cooldown waiting period for mouse key layer after activated */
    ib_toggle_layer: ib_toggle_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <750>;
    };

    behaviors {
        hrm: home_row_mod {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <HOLD_MS>;
            bindings = <&kp>, <&kp>;
        };

        lp: layer_key_press {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <HOLD_MS>;
            bindings = <&mo>, <&kp>;
        };

        klp: key_layer_press {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <HOLD_MS>;
            bindings = <&kp>, <&to>;
        };

        // unused?
        ll: layer_layer_press {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <HOLD_MS>;
            bindings = <&mo>, <&to>;
        };

        hth: hold_tap_hold_preferred {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <HOLD_MS>;
            bindings = <&kp>, <&kp>;
        };

        tsb: to_sym_bs {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <HOLD_MS>;
            bindings = <&to_sym_bs>, <&to>;
        };
    };

    macros {
        cp: copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LMETA>, <&macro_tap &kp C>, <&macro_release &kp LMETA>;
        };
        to_sym_bs: to_sym_bs_macro {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_tap &to BS_L>, <&macro_tap &mo SYM_L>, <&macro_pause_for_release>, <&macro_release &mo SYM_L>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_gam_ms_to_bs_l {
            timeout-ms = <HOLD_MS>;
            key-positions = <33 34>;
            layers = <GAM_L MS_L QGM_L QNM_L>;
            bindings = <&to BS_L>;
        };
        combo_bs_to_gam_l {
            timeout-ms = <HOLD_MS>;
            key-positions = <30 31>;
            layers = <BS_L>;
            bindings = <&to GAM_L>;
        };
        combo_bs_to_qgm_l {
            timeout-ms = <HOLD_MS>;
            key-positions = <30 34>;
            layers = <BS_L>;
            bindings = <&to QGM_L>;
        };
        combo_clear_bt {
            timeout-ms = <HOLD_MS>;
            key-positions = <20 21 22>;
            layers = <NAV_L>;
            bindings = <&bt BT_CLR>;
        };
        copy {
            timeout-ms = <HOLD_MS>;
            key-positions = <12 22>;
            layers = <BS_L>;
            bindings = <&cp>;
        };
    };

    keymap {
        // view with :set tabstop=18
        // TODO: move to NUM_L to better finger

        compatible = "zmk,keymap";

        base_layer {
            display-name = "base";
            bindings = <
&kp Q	&kp W	&kp F	&kp P	&kp B		&kp J	&kp L	&kp U	&kp Y	&key_repeat
&hrm LCTRL A	&hrm LALT R	&hrm LMETA S	&hrm LSHFT T	&kp G		&kp M	&hrm RSHFT N	&hrm RMETA E	&hrm RALT I	&hrm RCTRL O
&kp Z	&kp X	&kp C	&kp D	&kp V		&kp K	&kp H	&kp COMMA	&kp DOT	&key_repeat
		&none 	&klp LSHFT NAV_L	&key_repeat		&key_repeat	&lp SYM_L SPACE
            >;
        };

        symbol_layer {
            display-name = "sym";
            bindings = <
&kp SQT	&kp LT 	&kp GT	&kp DQT	&kp POUND		&kp DLLR	&kp UNDER	&kp LBKT	&kp RBKT	&kp PRCNT
&hrm LCTRL EXCL	&hrm LALT MINUS	&hrm LMETA PLUS	&hrm LSFT SEMI	&kp EQUAL		&kp AMPS	&hrm RSHFT COLON	&hrm RMETA LPAR	&hrm RALT RPAR	&hrm RCTRL QMARK
&kp CARET	&kp BSLH	&kp STAR	&kp FSLH	&kp GRAVE		&kp PIPE	&kp TILDE	&kp LBRC	&kp RBRC	&kp AT
		&none	&to NAV_L	&key_repeat		&key_repeat	&tsb 0 BS_L
            >;
        };

        num_layer {
            display-name = "num";
            bindings = <
&kp F1	&kp F2	&kp F3	&kp F4	&kp F5		&kp F6	&kp F7	&kp F8	&kp F9	&kp F10
&hrm LCTRL N1	&hrm LALT N2	&hrm LMETA N3	&hrm LSHFT N4	&kp N5		&kp N6	&hrm RSHFT N7	&hrm RMETA N8	&hrm RALT N9	&hrm RCTRL N0
&kp F11	&kp F12	&kp F13	&kp F14	&kp F15		&kp F16	&kp F17	&kp F18	&kp F19	&kp F20
		&none	&to NAV_L	&key_repeat		&key_repeat	&tsb 0 BS_L
            >;
        };

        nav_layer {
            display-name = "nav";
            bindings = <
&kp BRIDN	&kp BRIUP	&kp VOLDN	&kp VOLUP	&kp VMUTE		&out OUT_USB	&kp DEL	&kp TAB	&kp CAPS	&key_repeat
&kp LCTRL	&hth LALT C_PREV	&hth LMETA C_NEXT	&klp LSHFT NUM_L	&kp C_PP		&kp LEFT	&kp DOWN	&kp UP	&kp RIGHT	&kp ESC
&bt BT_SEL 0	&bt BT_SEL 1	&bt BT_SEL 2	&kp BSPC	&none		&out OUT_BLE	&kp RET	&mkp LCLK	&mkp RCLK	&key_repeat
		&none	&to NAV_L	&key_repeat 		&key_repeat	&tsb 0 BS_L
            >;
        };

        gaming_layer {
            display-name = "game";
            bindings = <
&kp Q	&kp W	&kp F	&kp P	&kp B		&kp J	&kp L	&kp U	&kp Y	&kp SEMI
&kp A	&kp R	&kp S	&kp T	&kp G		&kp M	&kp N	&kp E	&kp I	&kp O
&kp Z	&kp X	&kp C	&kp D	&kp V		&kp K	&kp H	&kp COMMA	&kp DOT	&kp FSLH
		&kp LALT	&kp SPACE	&kp LSHFT 		&key_repeat	&hrm SYM_L SPACE
            >;
        };

        mouse_layer {
            display-name = "mouse";
            bindings = <
&none	&none	&none	&none	&none		&none	&none	&none	&none	&to BS_L
&none	&none	&none	&none	&none		&none	&mkp LCLK	&mkp MCLK	&mkp RCLK	&mo SCM_L
&none	&none	&none	&none	&none		&none	&mkp LCLK	&mkp MCLK	&mkp RCLK	&mo SNM_L
		&none	&none	&none 		&none	&none
            >;
        };

        snipe_mouse_layer {
            display-name = "sn-ms";
            bindings = <
&trans	&trans	&trans	&trans	&trans		&trans	&trans	&trans	&trans	&trans
&trans	&trans	&trans	&trans	&trans		&trans	&trans	&trans	&trans	&trans
&trans	&trans	&trans	&trans	&trans		&trans	&trans	&trans	&trans	&trans
		&trans	&trans	&trans 		&trans	&trans
            >;
        };

        scroll_mouse_layer {
            display-name = "sc-ms";
            bindings = <
&trans	&trans	&trans	&trans	&trans		&trans	&trans	&trans	&trans	&trans
&trans	&trans	&trans	&trans	&trans		&trans	&trans	&trans	&trans	&trans
&trans	&trans	&trans	&trans	&trans		&trans	&trans	&trans	&trans	&trans
		&trans	&trans	&trans 		&trans	&trans
            >;
        };

        // for games that have wasd and no keybinds
        qwerty_gaming_layer {
            display-name = "q-gam";
            bindings = <
&kp TAB	&kp Q	&kp W	&kp E	&kp R		&kp J	&kp L	&kp U	&kp Y	&kp BSPC
&kp LSHFT	&kp A	&kp S	&kp D	&kp F		&kp M	&kp N	&kp E	&kp I	&kp O
&kp LCTRL	&kp Z	&kp X	&kp C	&kp D		&kp K	&kp H	&kp COMMA	&kp DOT	&kp RET
		&kp LALT	&kp SPACE	&mo QNM_L 		&none	&none
            >;
        };

        qwerty_num_layer {
            display-name = "q-num";
            bindings = <
&kp N6	&kp N7	&kp N8	&kp N9	&kp N0		&kp J	&kp L	&kp U	&kp Y	&kp BSPC
&kp N1	&kp N2	&kp N3	&kp N4	&kp N5		&kp M	&kp N	&kp E	&kp I	&kp O
&kp F1	&kp F2	&kp F3	&kp F4	&kp F5		&kp K	&kp H	&kp COMMA	&kp DOT	&kp RET
		&kp LALT	&kp SPACE	&none 		&none	&none
            >;
        };
   };
};
